pipeline {
    agent any;
    triggers { 
        pollSCM('* * * * *') 
    }
    options { 
        disableConcurrentBuilds()
        quietPeriod(30) 
    }
    environment {
        DOCKERHUB_CREDS = credentials('dockerhub')
        GITHUB_CREDS = credentials('github_artifact_token')
    }
    stages {
        stage("Fetching Git Tags"){
             //when { changeset "**"}
            steps {
                script {
                    currentBuild.displayName = "Build: " + currentBuild.displayName 
                    // + " / Commit: " + env.GIT_COMMIT 
                }
                sh "git fetch --tag"
                sh "git rev-parse  HEAD > commit_hash.log "
            }
        }
        stage('Computing Changes') {
            steps {
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    echo "Tags:"
                    git tag
                    echo "### Changed Files ###"
                    echo "production_pointer is in:"
                    git rev-list -n 1 production_pointer
                    git diff --name-only production_pointer \${GIT_COMMIT}
                    echo "### Generating Dependency Graph ###"
                    ./generates_deps
                    """
                archiveArtifacts artifacts: '*.png', fingerprint: true
            }
        }
        stage('Impacted Unit Test') {
            steps {
                echo 'Testing..'
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    echo "### TESTING ###"
                    ./test_impacted production_pointer \${GIT_COMMIT}
                    """
            }
        }
        stage('Publishing Impacted Images') {
            steps {
                echo 'Pushing Imagess..'
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    echo "### Push Impacted ###"
                    docker login --username \${DOCKERHUB_CREDS_USR} -p  \${DOCKERHUB_CREDS_PSW}
                    ./push_impacted production_pointer \${GIT_COMMIT}
                    """
            }
        }

        stage('Repackaging Impacted Applications') {
            steps {
                echo 'Re-packaging..'
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    echo "### Creating Artifacts ###"
                    mkdir -p artifacts/
                    ./artifact_impacted production_pointer \${GIT_COMMIT}
                    echo "### Packaging Impacted Applications ###"
                    echo ""
                    echo ""
                    echo ""
                    find -L ./bazel-bin -name "APPLICATION.manifest" -delete || true
                    ./list_applications_impacted   production_pointer \${GIT_COMMIT}| xargs -L 1 bazel build  --logging 0
                    """
            }
        }


        stage('Geting Artifact Repo') {
            steps {
                sh  """
                    cd /tmp
                    git clone https://\${GITHUB_CREDS_USR}:\${GITHUB_CREDS_PSW}@github.com/OStartUp/artifacts.git
                    """
            }   
        }

        stage('Publishing Changes') {
            steps {
                echo 'Publishing..'
                sh  """
                    cp -v commit_hash.log /tmp/artifacts
                    .ci/publish 
                    echo  GIT_COMMIT=\${GIT_COMMIT} > build.properties
                    """
            }
        }
    }

    post {
        always {
           archiveArtifacts artifacts: '**/*.log', fingerprint: true
        }
        success {
            echo 'I succeeeded!'
            archiveArtifacts artifacts: 'artifacts/**', fingerprint: true
            archiveArtifacts 'build.properties'
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }   
    }
}

