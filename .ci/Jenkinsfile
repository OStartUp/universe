pipeline {
    agent any;
    environment {
    DOCKERHUB_CREDS = credentials('dockerhub')
    }
    stages {
        stage('Computing Changes') {
            steps {
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    git fetch --tag
                    echo "Tags:"
                    git tag
                    echo "### Changed Files ###"
                    echo "production_pointer is in:"
                    git rev-list -n 1 production_pointer
                    git diff --name-only production_pointer \${GIT_COMMIT}
                    echo "### Generating Dependency Graph ###"
                    ./generates_deps
                    """
                
            }
        }
        stage('Impacted Unit Test') {
            steps {
                echo 'Testing..'
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    echo "### TESTING ###"
                    ./test_impacted production_pointer \${GIT_COMMIT}
                    """
            }
        }
        stage('Publishing Impacted Images') {
            steps {
                echo 'Pushing Imagess..'
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    echo "### Push Impacted ###"
                    docker login --username \${DOCKERHUB_CREDS_USR} -p  \${DOCKERHUB_CREDS_PSW}
                    ./push_impacted production_pointer \${GIT_COMMIT}
                    """
            }
        }

        stage('Repackaging Impacted Applications') {
            steps {
                echo 'Re-packaging..'
                sh  """
                    echo ""
                    echo ""
                    echo ""
                    echo "### Creating Artifacts ###"
                    ./artifact_impacted production_pointer \${GIT_COMMIT}
                    echo "### Packaging Impacted Applications ###"
                    echo ""
                    echo ""
                    echo ""
                    find -L ./bazel-bin -name "APPLICATION.manifest" -delete
                    ./list_applications_impacted   production_pointer \${GIT_COMMIT}| xargs -L 1 bazel build  --logging 0
                    """
            }
        }

        stage('Publishing Changes') {
            steps {
                echo 'Publishing..'
                sh  """
                    find -L ./bazel-bin -name "APPLICATION.manifest" > .changed_applications
                    cat .changed_applications
    
                    rm -rf artifacts
                    mkdir -p artifacts
                    while read artifact; do
                        echo "Publishing: \${artifact}"
                        ZIP_ARTIFACT=\$(cat \${artifact} | cut -d " " -f 2)
                        cp -v \${ZIP_ARTIFACT} artifacts/
                    done < .changed_applications
                    """
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '*.png', fingerprint: true
        }
        success {
            echo 'I succeeeded!'
            archiveArtifacts artifacts: 'artifacts/*', fingerprint: true
        }
        unstable {
            echo 'I am unstable :/'
        }
        failure {
            echo 'I failed :('
        }
        changed {
            echo 'Things were different before...'
        }   
    }
}

